import streamlit as st
import pandas as pd
import numpy as np
import openpyxl
from datetime import datetime, timedelta
import io

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤",
        page_icon="üìä",
        layout="wide"
    )
    
    st.title("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞–¥–∏–π —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'processed_data' not in st.session_state:
        st.session_state.processed_data = None
    if 'original_data' not in st.session_state:
        st.session_state.original_data = None
    
    # –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö",
        type=['csv', 'xls', 'xlsx'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö CSV, XLS, XLSX"
    )
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        load_button = st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", use_container_width=True)
    
    with col2:
        analyze_button = st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, disabled=uploaded_file is None)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    if load_button and uploaded_file:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            file_extension = uploaded_file.name.split('.')[-1].lower()
            
            if file_extension == 'csv':
                # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            elif file_extension in ['xls', 'xlsx']:
                # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
                df = pd.read_excel(uploaded_file, engine='openpyxl' if file_extension == 'xlsx' else None)
            else:
                st.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                return
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how='all')
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ business_id –ø—É—Å—Ç–æ–π
            df = df.dropna(subset=['business_id'])
            
            st.session_state.original_data = df
            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π.")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if analyze_button and st.session_state.original_data is not None:
        try:
            processed_data = process_data(st.session_state.original_data)
            st.session_state.processed_data = processed_data
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.processed_data is not None:
        display_results(st.session_state.processed_data)

def process_data(df):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    date_columns = ['created_at', 'ts_from', 'ts_to']
    for col in date_columns:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], format='%d.%m.%Y', errors='coerce')
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ created_at –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    df_sorted = df.sort_values('created_at', ascending=False)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ business_id (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ - —Å–∞–º—ã–π –Ω–æ–≤—ã–π)
    unique_requests = df_sorted.drop_duplicates(subset='business_id', keep='first')
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ business_id –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ
    latest_records = df.groupby('business_id').apply(
        lambda x: x.loc[x['ts_from'].idxmax()] if x['ts_from'].notna().any() else x.iloc[-1]
    ).reset_index(drop=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    result_data = []
    
    for _, unique_row in unique_requests.iterrows():
        business_id = unique_row['business_id']
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π
        latest_row = latest_records[latest_records['business_id'] == business_id].iloc[0]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ä–∞–±–æ—Ç–µ
        if pd.notna(latest_row['ts_from']):
            days_in_work = (datetime.now() - latest_row['ts_from']).days
        else:
            days_in_work = 0
        
        result_data.append({
            'business_id': int(business_id),
            'created_at': unique_row['created_at'].strftime('%d.%m.%Y') if pd.notna(unique_row['created_at']) else '',
            '–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ': days_in_work,
            'form_type_report': unique_row.get('form_type_report', ''),
            'report_code': unique_row.get('report_code', ''),
            'report_name': unique_row.get('report_name', ''),
            'current_stage': unique_row.get('current_stage', ''),
            'ts_from': latest_row['ts_from'].strftime('%d.%m.%Y') if pd.notna(latest_row['ts_from']) else '',
            'analyst': unique_row.get('Analyst', ''),
            'request_owner': unique_row.get('request_owner', ''),
            'request_owner_ssp': unique_row.get('request_owner_ssp', '')
        })
    
    return pd.DataFrame(result_data)

def display_results(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º"""
    
    st.markdown("---")
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
    st.subheader("üîé –ü–æ–∏—Å–∫")
    search_query = st.text_input(
        "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç—á–µ—Ç–∞ (report_code) –∏–ª–∏ business_id:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ business_id..."
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    filtered_df = df.copy()
    if search_query:
        search_mask = (
            filtered_df['report_code'].astype(str).str.contains(search_query, case=False, na=False) |
            filtered_df['business_id'].astype(str).str.contains(search_query, case=False, na=False)
        )
        filtered_df = filtered_df[search_mask]
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîß –§–∏–ª—å—Ç—Ä—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        form_types = ['–í—Å–µ'] + sorted(df['form_type_report'].dropna().unique().tolist())
        selected_form_type = st.selectbox("–¢–∏–ø —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞:", form_types)
        
        analysts = ['–í—Å–µ'] + sorted(df['analyst'].dropna().unique().tolist())
        selected_analyst = st.selectbox("–ê–Ω–∞–ª–∏—Ç–∏–∫:", analysts)
    
    with col2:
        stages = ['–í—Å–µ'] + sorted(df['current_stage'].dropna().unique().tolist())
        selected_stage = st.selectbox("–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:", stages)
        
        owners = ['–í—Å–µ'] + sorted(df['request_owner'].dropna().unique().tolist())
        selected_owner = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞:", owners)
    
    with col3:
        owner_ssps = ['–í—Å–µ'] + sorted(df['request_owner_ssp'].dropna().unique().tolist())
        selected_owner_ssp = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –°–°–ü:", owner_ssps)
        
        min_days = st.number_input("–ú–∏–Ω. –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ:", min_value=0, value=0)
    
    with col4:
        max_days = st.number_input("–ú–∞–∫—Å. –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ:", min_value=0, value=1000)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
            st.rerun()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if selected_form_type != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['form_type_report'] == selected_form_type]
    
    if selected_stage != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['current_stage'] == selected_stage]
    
    if selected_analyst != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['analyst'] == selected_analyst]
    
    if selected_owner != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['request_owner'] == selected_owner]
    
    if selected_owner_ssp != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['request_owner_ssp'] == selected_owner_ssp]
    
    filtered_df = filtered_df[
        (filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'] >= min_days) & 
        (filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'] <= max_days)
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(df))
    with col2:
        st.metric("üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", len(filtered_df))
    with col3:
        if len(filtered_df) > 0:
            avg_days = filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'].mean()
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ", f"{avg_days:.1f}")
        else:
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ", "0")
    with col4:
        if len(filtered_df) > 0:
            max_days_value = filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'].max()
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π", max_days_value)
        else:
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π", "0")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if len(filtered_df) > 0:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        column_config = {
            'business_id': st.column_config.NumberColumn('Business ID', format='%d'),
            'created_at': st.column_config.TextColumn('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'),
            '–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ': st.column_config.NumberColumn('–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ', format='%d'),
            'form_type_report': st.column_config.TextColumn('–¢–∏–ø —Ñ–æ—Ä–º—ã'),
            'report_code': st.column_config.TextColumn('–ö–æ–¥ –æ—Ç—á–µ—Ç–∞'),
            'report_name': st.column_config.TextColumn('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞'),
            'current_stage': st.column_config.TextColumn('–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è'),
            'ts_from': st.column_config.TextColumn('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'),
            'analyst': st.column_config.TextColumn('–ê–Ω–∞–ª–∏—Ç–∏–∫'),
            'request_owner': st.column_config.TextColumn('–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞'),
            'request_owner_ssp': st.column_config.TextColumn('–í–ª–∞–¥–µ–ª–µ—Ü –°–°–ü')
        }
        
        st.dataframe(
            filtered_df,
            use_container_width=True,
            column_config=column_config,
            hide_index=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        if st.button("üì• –°–∫–∞—á–∞—Ç—å –≤ Excel", use_container_width=True):
            excel_data = create_excel_download(filtered_df)
            st.download_button(
                label="üíæ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
                data=excel_data,
                file_name=f"requests_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")

def create_excel_download(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤', index=False)
        
        # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        workbook = writer.book
        worksheet = writer.sheets['–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤']
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width
    
    output.seek(0)
    return output.getvalue()

if __name__ == "__main__":
    main()
